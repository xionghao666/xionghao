数据读取根据索引找到（B+tree）对应数据页（page），先把数据页缓存到 buffer pool, buffer pool 大小为128M,数据页大小为 16kb.

buffer pool 里面有个 free 链表，用来管理着空白数据页的位置。
free 链表的头部是基节点，存着所有空白节点信息，当有新的数据页进入buffer poll会去free链表中找到空白页的位置，然后将数据存入空白页后
删除free链表中的对应节点，同理有数据页从buffer pool中被删除的时候也会往free链表中加入指向空白页的新节点，所以说free链表管理着buffer pool
的空白页位置。

flush链表 用来管理buffer poll 中的脏页就是被修改的数据页
flush链表结构和free链表类似，后台有专门的线程根据flush链表去吧数据持久化的磁盘中。链表排序根据被修改时间。

当buffer pool 内存满了，存不下新的数据页，就需要用到 LRU 链表
lru链表用来管理淘汰不常用的数据页，也就是冷数据。
链表头部同样是基节点，每一个新加入的页都会排在lru链表的最前面，再次被使用到的数据页就会把自己在lru链表中的位置更新到最前面
相当于排序靠前的始终是热点数据，靠后的是冷门数据，这样就形成了淘汰机制，buffer pool 满了之后就会删除最后的冷门数据。
这是老版本的方式存在很大缺点，如果使用全表扫描就会一下子把热点数据全部淘汰了，所以新的方式是，把整个lru链表分为
热数据区域和冷数据区域，分别占5/8和3/8，新数据来了之后先排在冷数据的最前排，当这个数据再次被使用的时间和上一次使用
时间间隔大于一秒就会把这个数据页放到热数据最前排，这样形成了辨别机制确认新来的数据是货真价实的热数据才放到链表最前面。

更新操作的时候，数据先在buffer pool里面更新，然后记录到 redo log中，redo log 在事务提交的时候会把数据持久化到磁盘里。
innodb_flush_log_at_trx_commit 参数用来设置什么时候redo log 去进行持久化，默认是1

0 ： 事务提交时不持久化，这个任务交给后台线程去处理
1 ： 事务提交时进行持久化
2 ： 提交时将 redo log 写到操作系统缓冲区，并不持久化，即使mysql 挂了也可以保持数据一致性

redo log 文件有两个，ib_logfile0 和 ib_logfile1, 这两个文件相互切换使用。
先写入0， 满了之后在写入1 ，都满了0文件回去做 check point 操作把哪些更新数据的脏页持久化到磁盘。
清空0file 再次写入，可以通过调大这两个文件的大小来减少check point 频率，也算一种调优。

redo log 记录的是某一页的物理位置哪些数据被修改了（innodb 自己独有的）
bin log 记录的是sql 语句用于备份和主从同步
undo log 反向操作日志，用于回滚数据

double write buffer 是存在于磁盘中，用来存储从innodb里写入磁盘的数据
innodb数据页是16kb,操作系统数据页只有4kb,所以直接写入需要4次，因此使用 double write buffer过渡
先写入 double write buffer , redo log 会记录写入状态，在从double write log 写入磁盘数据的位置。

索引页的数据也会缓存到 buffer pool 中，update sql 会存入 change buffer中，根据 change buffer中的记录
去更新索引页数据，在持久化到磁盘索引页