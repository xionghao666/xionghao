什么是主从复制？

Mysql主从复制是其重要的功能之一。主从复制是指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库，
主服务器的数据自动复制到从服务器中。对于多级复制，数据库服务器即可充当主机，也可以充当从机。Mysql主从复制的
基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。

Mysql主从复制的类型

1. 基于语句的复制：
主服务器上面执行的语句在从服务器上面再执行一遍，在Mysql-3.23版本以后支持。
存在的问题：时间上可能不完全同步造成偏差，执行语句的用户也可能是不同用户。

2.基于行的复制：
把主服务器上面改编后的内容直接复制过去，而不关心到底改变该内容是由哪条语句引发的，在Mysql-5.0以后引入
存在的为题：大量的行复制造成开销比较大，而基于语句只要一条语句就可以。

3.混合类型的复制：
Mysql默认使用基于语句的复制。当基于语句的复制会引发问题的时候就会使用基于行的复制。Mysql会自动进行选择。
在Mysql主从复制架构中，读操作可以在所有的服务器上面执行，而写操作只能在主服务器上面执行。主从复制架构虽然
给读操作提供了扩展，可如果写操作比较多，单主模型的复制中主服务器必然会成为性能瓶颈。

主从复制工作原理：
主服务器上面的任何修改都会保存在二进制日志Binary log里面，从服务器上面启动一个 I/O thread (实际上
就是一个主服务器的客户端进程)，连接到主服务器上面请求读取二进制日志，然后把读取到的二进制日志写到本地的
一个Rrealy log里面。从服务器上面开启一个SQL thread 定时检查Realy log, 如果发现有更改内容立即在本机
上面执行一遍。

如果一主多从多话，这时既要负责写又要负责为几个从库提供二进制日志。此时可以稍做调整，将二进制日志只给某一
从，这一从再开启二进制日志并将自己的二进制日志在发给其他从。或者干脆这个从不负责记录只负责将二进制日志转发
给其他从。

老版本的主从复制是由一个进程完成的，但是存在较大的风险和性能问题：
首先一个进程会使复制bin-log日志和解析日志并在自身执行的过程成为一个串行的过程，性能受到了一定的限制，异步
复制的延迟也会比较长。
另外Slave端从Master端获取bin-log过来之后，需要接着解析日志内容，然后在自身执行。在这个过程中，Master
端可能又产生大量变化并新增了大量的日志。如果在这个阶段Master端的存储出现了无法修复的错误，那么在这个阶段所产生
的所有变更都将永远无法找回。如果在Slave端的压力较大的时候，这个过程时间可能比较长。

现在换成两个进程处理同样还是存在slave数据延时以及数据丢失的可能性，毕竟这个复制时异步的。要完全解决就只能用
Mysql的cluster来解决了。cluster是内存数据库的解决方案，需要将所有的数据都加载到内存中，这样就对内存的要求
非常大了，对于一般大应用来说可实施性不是太大。

Mysql的复制过滤分为：在Master上过滤二进制日志在的事件；在Slave上过滤中继日志中的事件
参数： binlog-ignore-db=mysql //被忽略的数据库


主从复制的过程：
两种情况 同步复制和异步复制，实际复制架构中大部分为异步复制

Slave上面的IO进程连接上Master,并请求从指定的日志文件的指定位置（或者从最开始的日志）之后的日志内容

Master接受到来自Slava的IO进程的请求后，负责复制的IO进程会根据请求信息读取日志指定位置之后的日志信息
，返回给Slave的IO进程。返回信息中除了日志所包含的信息外，还包括本次返回的信息以及到Master端的bin-log
文件名称以及bin-log的位置。

Slave的IO进程接受到信息后，将接受到的日志内容依次添加到Slave端的relay-log文件的最末端，并将读取
到的Master端的bin-log文件名和位置记录到master-info文件中，以便下一次读取到时候能够清楚的告诉Master
我需要从个某个bin-log的哪个位置开始往后的日志内容，请发给我

Slave的sql进程检测到relay-log中新增加了内容后，会马上分析relay-log的内容成为在Master端真实执行时
的那些可执行内容，在自身执行。

具体配置：

1.修改mysql配置

找到主数据库的配置文件my.cnf(或者my.ini)，我的在/etc/mysql/my.cnf,在[mysqld]部分插入如下两行：

log-bin=mysql-bin #开启二进制日志
server-id=1       #设置server-id

2.重启mysql，创建用于同步的用户账号

打开mysql会话shell>mysql -hlocalhost -uname -ppassword

创建用户并授权：用户：rel1密码：slavepass

mysql> CREATE USER 'repl'@'123.57.44.85' IDENTIFIED BY 'slavepass';#创建用户
mysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'123.57.44.85';#分配权限
mysql>flush privileges;   #刷新权限

3.查看master状态，记录二进制文件名(mysql-bin.000003)和位置(73)：
mysql > SHOW MASTER STATUS;

4.从服务器slave修改my.cnf添加server-id:
server-id=2 #设置server-id，必须唯一 

5.重启mysql，打开mysql会话，执行同步SQL语句(需要主服务器主机名，登陆凭据，二进制文件的名称和位置)：

mysql> CHANGE MASTER TO
    ->     MASTER_HOST='182.92.172.80',
    ->     MASTER_USER='rep1',
    ->     MASTER_PASSWORD='slavepass',
    ->     MASTER_LOG_FILE='mysql-bin.000003',
    ->     MASTER_LOG_POS=73;

6.启动slave同步进程：
mysql>start slave;

7.查看slave状态：
mysql> show slave status\G;

*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 182.92.172.80
                  Master_User: rep1
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000013
          Read_Master_Log_Pos: 11662
               Relay_Log_File: mysqld-relay-bin.000022
                Relay_Log_Pos: 11765
        Relay_Master_Log_File: mysql-bin.000013
             Slave_IO_Running: Yes 代表成功
            Slave_SQL_Running: Yes 代表成功
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
        ...


当Slave_IO_Running和Slave_SQL_Running都为YES的时候就表示主从同步设置成功了。

还可以用到的其他相关参数：

master开启二进制日志后默认记录所有库所有表的操作，可以通过配置来指定只记录指定的数据库甚至指定的表的操作，具体在mysql配置文件的[mysqld]可添加修改如下选项：

# 不同步哪些数据库  
binlog-ignore-db = mysql  
binlog-ignore-db = test  
binlog-ignore-db = information_schema  
  
# 只同步哪些数据库，除此之外，其他不同步  
binlog-do-db = game  


