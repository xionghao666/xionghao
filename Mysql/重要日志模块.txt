重要的日志模块：redo log
innodb存储引擎独有

redo log文件可以配置固定大小，例如配置一组4个文件
每个文件1GB，可以从头写到尾，进行循环写，会有定时任务把日志持久化到磁盘并且清除。

write pos 是当前记录的位置，一边写一边后移
checkpoint 是当前要擦除的位置
write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作

如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，
得停下来先擦掉一些记录，把 checkpoint 推进一下。

==========================================================================

重要的日志模块：binlog
mysql一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜
redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）

这两种日志有以下三点不同。redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。
redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，
记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。redo log 是循环写的，空间固定会用完；
binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。


update 内部流程
1. 执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。
如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。

2. 执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。

3. 引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。

4. 执行器生成这个操作的 binlog，并把 binlog 写入磁盘。

5. 执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。

两阶段提交： 写入redo log => 写入bin log => 提交事务处于commit状态
避免了数据不一致问题

