1.使用值为 nil 的 slice、map会发生啥

允许对值为 nil 的 slice (apend) 添加元素，但对值为 nil 的 map 添加元素，则会造成运行时 panic。

2.string 类型的值可以修改吗?

不能，尝试使用索引遍历字符串，来更新字符串中的个别字符，是不允许的。
string 类型的值是只读的二进制 byte slice，如果真要修改字符串中的字符，将 string 转为 []byte 修改后，再转为 string 即可。
案例：
 x := "text"
 xBytes := []byte(x)
 xBytes[0] = 'T' // 注意此时的 T 是 rune 类型
 x = string(xBytes)

3.如何从 panic 中恢复
在一个 defer 延迟执行的函数中调用 recover ，它便能捕捉/中断 panic。
defer func() {
  fmt.Println("recovered: ", recover())
 }()

4.range 迭代 map是有序的吗
无序的。Go 的运行时是有意打乱迭代顺序的，所以你得到的迭代结果可能不一致

5.如何跳出for select循环

使用 goto语句

6.new和make的区别
new 的作用是初始化一个指向类型的指针 (*T)，返回值是指向这个新分配的零值的指针。

make 的作用是为 slice，map 或 chan 初始化并返回引用 (T)，并且返回类型是 T（不是T*）的一个初始化的（不是零值）的实例

7.go语言中有哪些引用类型
数组切片，字典map，通道channel，接口interface

8.解析 JSON 数据时，默认将数值当做哪种类型?
在 encode/decode JSON 数据时，Go 默认会将数值当做 float64 处理。

9.channel的存取情况？

对一个关闭的通道再发送值就会导致panic。
对一个关闭的通道进行接收会一直获取值直到通道为空。
对一个关闭的并且没有值的通道执行接收操作会得到对应类型的零值。
关闭一个已经关闭的通道会导致panic。















